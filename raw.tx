// <div className="Main-page">
          //   <div className="result">
          //     <div className="result-title">
          //       <img src="images/user.jpg" alt="" />
          //       <p>{recentPrompt}</p>
          //     </div>
          //     <div className="result-data">
          //       <img src="images/chankya.png" alt="" />
          //       {loading ? (
          //         <div className="loader">
          //           <hr />
          //           <hr />
          //           <hr />
          //         </div>
          //       ) : (
          //         <p dangerouslySetInnerHTML={{ __html: resultData }}></p>
          //       )}
          //     </div>
          //   </div>
          //   <section className="section graph-section">
          //     <h2>Graph</h2>
          //     <div className="graph-container">
          //       {/* Render your graph here */}
          //       <VictoryChart>
          //         <VictoryLine data={graphData} />
          //         <VictoryAxis />
          //         <VictoryAxis dependentAxis />
          //       </VictoryChart>
          //     </div>
          //   </section>

          //   {/* Section for table */}
          //   <section className="section table-section">
          //     <h2>Table</h2>
          //     <div className="table-container">
          //       <table>
          //         <thead>
          //           <tr>
          //             <th>ID</th>
          //             <th>Name</th>
          //             <th>Age</th>
          //           </tr>
          //         </thead>
          //         <tbody>
          //           {tableData.map((row) => (
          //             <tr key={row.id}>
          //               <td>{row.id}</td>
          //               <td>{row.name}</td>
          //               <td>{row.age}</td>
          //             </tr>
          //           ))}
          //         </tbody>
          //       </table>
          //     </div>
          //   </section>

          //   {/* Section for related questions */}
          //   <div className="section related-questions-section">
          //     <h2>Related Questions</h2>
          //     <div className="related-questions-container">
          //       <ul>
          //         {relatedQuestions.map((question, index) => (
          //           <li key={index}>{question}</li>
          //         ))}
          //       </ul>
          //     </div>
          //   </div>
          // </div>
          // <V/>

          let formattedResponse = response
   .replace(/\*\*(.*?)\*\*/g, '<span style="font-weight: 600;">$1</span>') 
   .replace(/\*(.*?)\*/g, '<em>$1</em>') 
   .replace(/\n/g, '<br/>') // Replace newline characters with <br/>
   .replace(/(?:^|\n)\s*(\d+\.)(.*?)(?=\n|$)/g, '<li style="margin-left: 20px;">$1 $2</li>'); 

 formattedResponse = `<ul style="list-style: none;">${formattedResponse}</ul>`; 


 ///
 // useEffect(() => {
  //   const generateRelatedQuestions = (prompt) => {
  //     // Here you can implement your logic to generate related questions
  //     // This could be done using an NLP model or predefined rules
  //     // For demonstration, I'm using a simple rule-based approach
  //     const relatedQuestions = [];

  //     // Example rule-based generation
  //     relatedQuestions.push(`What is ${prompt}?`);
  //     relatedQuestions.push(`How does ${prompt} work?`);
  //     // Add more rules or customize as needed

  //     // Limit the number of questions to 3
  //     return relatedQuestions.slice(0, 3);
  //   };

  //   if (resultData && recentPrompt) {
  //     // Call the function to generate related questions based on the recent prompt
  //     const promptRelatedQuestions = generateRelatedQuestions(recentPrompt);

  //     // Delay before setting related questions
  //     setTimeout(() => {
  //       setRelatedQuestions(promptRelatedQuestions);
  //     }, 2000); // Add a delay of 2 seconds before setting related questions
  //   }
  // }, [resultData, recentPrompt]);
