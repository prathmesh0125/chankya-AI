import React, { useState } from 'react';

const Resources = () => {
  // Array of resource data
  const resourcesData = [
    {
      title: 'resource 1',
      comment: "The product "
    },
    {
      title: ' resource 2',
      comment: "The product "
    },
    {
      title: ' resource 3',
      comment: "The product"
    },
    {
      title: 'resource 4',
      comment: "The product"
    },
    {
      title: 'resource 4',
      comment: "The product"
    },
    {
      title: 'resource 4',
      comment: "The product"
    },
    // Add more resource data as needed
  ];

  const [showAllResources, setShowAllResources] = useState(false);

  const handleMoreClick = () => {
    setShowAllResources(true);
  };

  return (
    <div className="mx-auto max-w-5xl grid md:grid-cols-2 lg:grid-cols-4 gap-6 items-stretch mb-9 px-4 md:px-6">
      {resourcesData.slice(0, 3).map((resource, index) => (
        <div key={index} className="border rounded-lg flex-1 overflow-hidden bg-white">
          <div className="p-4 grid gap-2">
            <h4 className="text-sm font-semibold leading-none">{resource.title}</h4>
            <p className="text-sm text-gray-500 dark:text-gray-400">{resource.comment}</p>
          </div>
        </div>
      ))}
      {/* Render the "More" option */}
      {resourcesData.length > 3 && !showAllResources && (
        <div className="border rounded-lg flex-1 overflow-hidden bg-white">
          <div className="p-4 grid gap-2">
            <button className="text-sm font-semibold leading-none text-blue-500" onClick={handleMoreClick}>More</button>
          </div>
        </div>
      )}
      {/* Render the modal if "More" option is clicked */}
      {showAllResources && (
        <div className="fixed top-0 left-0 z-50 w-full h-full bg-gray-800 bg-opacity-50 flex items-center justify-center">
          <div className="bg-white w-72 p-4 rounded-lg max-w-md">
            <h2 className="text-lg font-semibold mb-4">All Resources</h2>
            {resourcesData.map((resource, index) => (
              <div key={index} className="border-b py-2">
                <h4 className="text-sm font-semibold leading-none">{resource.title}</h4>
                <p className="text-sm text-gray-500 dark:text-gray-400">{resource.comment}</p>
              </div>
            ))}
            <button className="mt-4 text-sm font-semibold leading-none text-blue-500" onClick={() => setShowAllResources(false)}>Close</button>
          </div>
        </div>
      )}
    </div>
  );
};

export default Resources;

// context
import { createContext } from "react";
import runChat from "../component/gemini";
import { useState, useEffect } from "react"; // Import useEffect hook
export const Context = createContext();
const ContextProvider = (props) => {
  const [input, setInput] = useState("");
  const [recentPrompt, setRecentPrompt] = useState("");
  const [prevoisPrompt, setPrevoisPrompt] = useState([]);
  const [showResult, setShowResult] = useState(false);
  const [loading, setLoading] = useState(false);
  const [resultData, setResultData] = useState("");
  const [renderComplete, setRenderComplete] = useState(false); // New state to track rendering completion
  const delayPara = (formattedResponse) => {
    const words = formattedResponse.split(/\s+/);
    for (let i = 0; i < words.length; i++) {
      const nextword = words[i];
      setTimeout(function () {
        setResultData((prev) => prev + nextword + " ");
        if (i === words.length - 1) { // If it's the last word
          setRenderComplete(true); // Set rendering completion to true
        }
      }, 75 * i);
    }
  };
  useEffect(() => { // Reset renderComplete state when input changes
    setRenderComplete(false);
  }, [input]);

  const newChat = () => {
    setLoading(false);
    setShowResult(false);
  };
  const defaultPromt = () => {
    setLoading(false);
    setShowResult(false);
  };
  const onSent = async (prompt) => {
    setResultData("");
    setLoading(true);
    setShowResult(true);
    let response;

    if (prompt !== undefined) {
      response = await runChat(prompt);
      setPrevoisPrompt((prev) => [...prev, prompt]);
      setRecentPrompt(prompt);
    } else {
      prompt = input; // Assign input to prompt if it's undefined
      setPrevoisPrompt((prev) => [...prev, input]);
      setRecentPrompt(input);
      response = await runChat(input);
    }

    // Format response for rendering
    let formattedResponse = response
      .replace(/\*\*(.*?)\*\*/g, '<span style="font-weight: 600;">$1</span>')
      .replace(/\*(.*?)\*/g, '<em>$1</em>')
      .replace(/\n/g, '<br/>') // Replace newline characters with <br/>
      .replace(/\* /g, '</li><ul><li>') // New bullet point for each main point
      .replace(/\*\* /g, '</li><ul><li><span style="font-weight: 400;">') // New sub-bullet point for each main point
      .replace(/(?:^|\n)\s*(\d+\.)(.*?)(?=\n|$)/g, '<li style="margin-left: 20px;">$1 $2</li>');

    formattedResponse = `<ul style="list-style: none;">${formattedResponse}</ul>`;

    delayPara(formattedResponse);

    setLoading(false);
    setInput("");
  };

  const contextValue = {
    prevoisPrompt,
    setPrevoisPrompt,
    onSent,
    setRecentPrompt,
    recentPrompt,
    showResult,
    loading,
    resultData,
    input,
    setInput,
    newChat,
    defaultPromt,
    renderComplete // Provide renderComplete to consumers
  };
  return (
    <Context.Provider value={contextValue}>{props.children}</Context.Provider>
  );
};
export default ContextProvider;
